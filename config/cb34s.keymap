#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};
&lt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <50>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
};

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define MEH LS(LC(LALT))

/ {
    behaviors {
        qt: quick_tap {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                require-prior-idle-ms = <50>;
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
                bindings = <&kp>, <&kp>;
            };
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;
            flavor = "tap-preferred";
        };


    macros {
                // sometimes my device thinks a modifier is being held down
                // pressing all modifiers fixes it.

                unstick: unstick {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
                };

                phil: phil {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&kp D &kp O &kp I &kp N &kp K &kp N4 &kp N2 &kp RET>;
                };

                shifted: macro_shifted_kp {
                    #binding-cells = <1>;
                    compatible = "zmk,behavior-macro-one-param";
                    bindings =
                    <&macro_press &kp LSHFT>,
                    <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                    <&macro_release &kp LSHFT>;
                };
                as: autoshift {
                    compatible = "zmk,behavior-macro-one-param";
                    #binding-cells = <1>;
                    bindings =
                    <&macro_press>,
                    <&macro_param_1to1>,
                    <&macro_param_1to2>,
                    <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                    <&macro_pause_for_release>,
                    <&macro_release>,
                    <&macro_param_1to1>,
                    <&macro_param_1to2>,
                    <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_esc {
                    key-positions = <0 1>;
                    bindings = <&kp ESCAPE>;
                    };
                 combo_esc1 {
                    key-positions = <11 12>;
                    bindings = <&kp ESCAPE>;
                    };
                combo_reset {
                    timeout-ms = <50>;
                    key-positions = <0 9>;
                    layers = <2>;
                    bindings = <&sys_reset>;
                };
                combo_boot {
                    timeout-ms = <50>;
                    key-positions = <5 20>;
                    layers = <2>;
                    bindings = <&bootloader>;
                };
                combo_minus {
                key-positions = <1 3>;
                bindings = <&as MINUS>;
            };
            combo_equal {
                key-positions = <2 4>;
                bindings = <&as EQUAL>;
            };
            combo_tilde {
                key-positions = <12 13>;
                bindings = <&kp TILDE>;
            };
            combo_unds {
                key-positions = <11 13>;
                bindings = <&kp UNDERSCORE>;
            };
            combo_caret {
               key-positions = <17 18>;
                bindings = <&as CARET>;
            };
            combo_semi {
                key-positions = <16 18>;
                bindings = <&as SEMICOLON>;
            };
            combo_amper {
                key-positions = <5 6>;
                bindings = <&kp AMPERSAND>;
            };
            combo_aster {
                key-positions = <6 7>;
                bindings = <&kp ASTERISK>;
            };
            combo_dollar {
                key-positions = <15 16>;
                bindings = <&kp DOLLAR>;
            };
            combo_percent {
                key-positions = <16 17>;
                bindings = <&kp PERCENT>;
            };
            combo_bang {
                key-positions = <25 26>;
                bindings = <&kp EXCL>;
            };
            combo_at {
                key-positions = <26 27>;
                bindings = <&kp AT>;
            };
            combo_num {
                key-positions = <27 28>;
                bindings = <&kp HASH>;
            };
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp Q  &kp W  &kp E  &kp R  &kp T  &qt RS(RC(RA(RGUI))) Y   &kp U  &kp I  &kp O  &qt RIGHT_GUI  P
            &qt LEFT_GUI A    &qt LEFT_ALT S    &qt LEFT_CONTROL D    &qt LEFT_SHIFT F    &qt LC(LS(LALT)) G &qt RC(RS(RALT)) H          &qt RIGHT_SHIFT J    &qt RIGHT_CONTROL K    &qt RIGHT_ALT L   &as SINGLE_QUOTE
            &kp Z    &qt RS(RC(RA(RGUI))) X             &kp C            &kp V                 &kp B              &kp N          &kp M        &as COMMA  &as DOT    &as FSLH
                                                                            &lt 2 TAB             &lt 1 BACKSPACE &qt RIGHT_SHIFT SPACE    &lt 2 ENTER
            >;
        };

        sym_layer {
            bindings = <
 &kp LG(Q)  &kp F7 &kp F8 &kp F9 &kp F10    &trans    &kp PG_UP   &kp PG_DN  &trans    &kp LS(LG(LC(NUMBER_4)))
 &kp LG(A)  &kp F4 &kp F5 &kp F6 &kp F11    &kp LEFT  &kp DOWN    &kp UP     &kp RIGHT &as SEMICOLON
 &kp LG(Z)  &kp F1 &kp F2 &kp F3 &kp F12    &trans    &kp HOME    &kp END    &none     &sl 3
                       &kp CAPSLOCK  &none   &kp LC(SPACE)   &kp DEL
            >;
        };

        // Main modifiers and arrow keys

        ext_layer {
            bindings = <
&phil    &kp GRAVE    &as MINUS  &as EQUAL &kp BSLH     &none     &as N7    &as N8    &kp N9    &none
 &none    &none    &kp LPAR   &kp RPAR  &kp PIPE   &none     &as N4    &as N5    &as N6    &kp COLON
 &none    &none    &as LBKT   &as RBKT  &kp TILDE  &none     &as N1    &as N2    &as N3    &kp DOT
                              &kp C_PP     &kp C_MUTE          &kp ESCAPE &kp N0
            >;
        };

        symbols_2_layer {
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none    &none    &none    &none    &bt BT_CLR
&none           &none          &none          &none          &none          &none    &none    &none    &none    &none
&soft_off       &none          &none          &none          &none          &none    &none    &none    &none    &phil
                               &none          &none          &none    &none
            >;
        };
    };
};
